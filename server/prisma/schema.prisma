generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  VISITOR
  USER
  ADMIN
  DEVELOPER
}

model User {
  id          String           @id @default(uuid())
  email       String           @unique
  password    String

  role        Role             @default(USER)
  permissions UserPermission[]
  isVerified        Boolean                @default(false)
  emailVerification UserVerificationEmail?
  accountStatus     AccountStatus?

  createdEvents     Event[]                @relation("createdEvents")
  receivedEvents    Event[]                @relation("receivedEvents")

  createdAt         DateTime               @default(now())
  updatedAt         DateTime?              @updatedAt
}

model AccountStatus {
  id        String  @id @default(uuid())
  isActive  Boolean @default(true)
  isBanned  Boolean @default(false)
  banReason String?

  // Moderation/compliance flags
  disabledUntil          DateTime?
  lastModerationActionAt DateTime?
  lastModerationReason   String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserVerificationEmail {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

// User role permissions 
model Permission {
  id    String           @id @default(uuid())
  name  String           @unique
  users UserPermission[]
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model ContactForm {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  email        String
  message      String
  phoneNumber  String
  location     String
  businessName String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model CallbackForm {
  id          String    @id @default(uuid())
  fullName    String
  phoneNumber String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

// Booking
model BookingItem {
  id              String    @id @default(uuid())
  time            Int       @default(0)
  date            DateTime
  fullName        String    @default("")
  phoneNumber     String    @default("")
  email           String    @default("")
  uniqueString    String    @default("")
  bookingApproved Boolean   @default(false)
  denied          Boolean   @default(false)
  cancelled       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model OpeningTime {
  id        Int     @id @default(autoincrement())
  dayOfWeek Int     @unique
  open      Boolean
  start     String?
  end       String?
}

model DayClosed {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  reason    String?
  createdAt DateTime @default(now())
}

// Newsletter
model NewsletterSubscriber {
  id                      String   @id @default(uuid())
  email                   String   @unique
  name                    String   @default("")
  uniqueStringUnsubscribe String   @default("")
  isVerified              Boolean  @default(false)
  createdAt               DateTime @default(now())

  verificationToken NewsletterVerificationToken?
}

model NewsletterVerificationToken {
  id           String               @id @default(uuid())
  uniqueString String               @default("")
  subscriberId String               @unique
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime             @default(now())
  updatedAt    DateTime?            @updatedAt
}

model NewsletterPublication {
  id          String    @id @default(uuid())
  title       String    @default("")
  content     String // save HTML or Markdown string
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

// Reviews
model Review {
  id        String    @id @default(uuid())
  firstName String    @default("")
  lastName  String    @default("")
  email     String    @default("")
  rating    Int       @default(5)
  message   String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// Media
model Media {
  id            String   @id @default(uuid())
  key           String   @unique         // s3 object key
  contentType   String?
  bytes         Int?
  width         Int?
  height        Int?
  durationSec   Int?
  uploadedById  Int?
  createdAt     DateTime @default(now())

  // backrefs
  blogLinks     BlogMedia[]
}


// Blog
model BlogPost {
  id             String    @id @default(uuid())
  title          String
  subTitle       String?
  subject        String?
  location       String?
  slug           String    @unique

  content        Json

  authorId       String?
  authorName     String?

  thumbnailImage String?

  isPublished    Boolean   @default(false)
  publishedAt    DateTime?
  viewCount      Int       @default(0)
  tags           BlogTag[]

  // NEW: links to Media via join table
  mediaLinks     BlogMedia[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([isPublished, publishedAt])
  @@index([publishedAt])
}

model BlogTag {
  id    String     @id @default(uuid())
  name  String     @unique
  posts BlogPost[]
}

enum MediaRole {
  FEATURED
  THUMBNAIL
  GALLERY
  EMBED
}

model BlogMedia {
  blogPostId  String
  mediaId     String
  role        MediaRole @default(GALLERY)
  position    Int       @default(0)
  alt         String?
  caption     String?

  post  BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  media Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([blogPostId, mediaId, role])
  @@index([blogPostId])
  @@index([mediaId])
  @@index([blogPostId, role])
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
  TEST
}

model Event {
  id           String    @id @default(uuid())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  viewed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}
